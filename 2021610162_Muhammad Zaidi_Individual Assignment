# Zaidi1
//Assignment 1
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

#define MAX_CHILDREN 10

void handle_interrupt(int sig) {
    printf("\nInterrupt detected. Exiting program.\n");
    exit(0);
}

int main() {
    int num_children, i;
    pid_t pid[MAX_CHILDREN];
    int fd[MAX_CHILDREN][2];
    char message[100];

    signal(SIGINT, handle_interrupt);

    printf("Enter the number of child processes to create (max %d): ", MAX_CHILDREN);
    scanf("%d", &num_children);

    if (num_children > MAX_CHILDREN) {
        printf("Maximum number of child processes exceeded. Exiting program.\n");
        exit(1);
    }

    for (i = 0; i < num_children; i++) {
        if (pipe(fd[i]) == -1) {
            printf("Error creating pipe. Exiting program.\n");
            exit(1);
        }

        pid[i] = fork();

        if (pid[i] == -1) {
            printf("Error forking process. Exiting program.\n");
            exit(1);
        }

        if (pid[i] == 0) {
            
            close(fd[i][1]); 

            char buffer[100];
            int n = read(fd[i][0], buffer, sizeof(buffer)); 
            buffer[n] = '\0';

            printf("Child process %d received message: %s\n", getpid(), buffer);

            close(fd[i][0]); // close read end of pipe
            exit(0);
        } else {
            
            close(fd[i][0]); 

            printf("Enter a message to send to child process %d: ", i+1);
            scanf("%s", message);

            write(fd[i][1], message, sizeof(message)); 

            close(fd[i][1]); 
        }
    }

    for (i = 0; i < num_children; i++) {
        waitpid(pid[i], NULL, 0); 
    }

    return 0;
}
